[[{"l":"Welcome to Wasmedge","p":["WasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime for cloud native, edge, and decentralized applications. It powers serverless apps, embedded functions, microservices, smart contracts, and IoT devices. WasmEdge is currently a CNCF (Cloud Native Computing Foundation) Sandbox project.","Let's check if continous deployment works?","Hey-hey getting intimidated? Not from us because...this website will guide the users and new contributors to work with WasmEdge and show the commonly use cases."]}],[{"l":"Develop WasmEdge Plug-in","p":["While the WasmEdge language SDKs allow registering host functions from a host (wrapping) application, developers should implement the host functions before compilation. For the other solutions, WasmEdge provides the plug-in architecture to load the plug-in shared library for easier extending of the host functions. With developing the plug-ins, WasmEdge SDKs in the supported languages can load and register the host functions from the plug-in shared libraries.","In current, developers can follow the guides to implement the plug-ins in C API (recommended) or C++."]}],[{"l":"Develop WasmEdge Plug-in in C API"},{"l":"Prerequisites","p":["For developing the WasmEdge plug-in in C API, please install WasmEdge first."]},{"l":"Example","p":["Assume that the plug-in example is in the file testplugin.c."]},{"l":"Host Functions","p":["The goal of the plug-in is to provide the host functions which can be imported when instantiating WASM. Therefore, developers can implement their plug-in host functions first, as the same as the host functions in WasmEdge C API.","For the more details about the external data and calling frame context, please refer to the host function guide."]},{"l":"Host Modules","p":["Then developers should implement the module creation functions.","Noticed that there can be several module instances in a plug-in shared library. Here take a module named as wasmedge_plugintest_c_module for the example"]},{"l":"Plug-in Descriptions","p":["For constructing the plug-in, developers should supply the descriptions of this plug-in and the modules."]},{"l":"Plug-in Options","p":["This section is reserved for the feature in the future."]}],[{"i":"develop-wasmedge-plug-in-in-c-api","l":"Develop WasmEdge Plug-in in C++ API","p":["We recommend developers to develop plug-ins in WasmEdge C API."]},{"l":"Prerequisites","p":["For developing the WasmEdge plug-in in internal C++, developers should build WasmEdge from source."]},{"l":"Example","p":["Assume that the plug-in example is in the file testplugin.h and testplugin.cpp."]},{"l":"Host Functions and Modules","p":["The goal of the plug-in is to provide the host functions which can be imported when instantiating WASM. Therefore, developers should implement their plug-in host functions in WasmEdge internal C++ first. Assume that the host function implementations are in the testplugin.h.","Develop WasmEdge Plug-in in C++ API"]},{"l":"Creation Functions for Modules","p":["Then developers should implement the module creation functions. Assume that the following implementations are all in the testplugin.cpp.","Develop WasmEdge Plug-in in C++ API"]},{"l":"Plug-in Descriptions","p":["For constructing the plug-in, developers should supply the descriptions of this plug-in and the modules."]},{"l":"Plug-in Options","p":["This section is reserved for the feature in the future."]}],[{"l":"Thankyou"},{"i":"thanks-for-spending-your-time-here","l":"Thanks for spending your time here!","p":["NOTE: This is just a demo website and some information could not be exact.","Thank you and hey as always a ❤ from my side!✌"]}]]